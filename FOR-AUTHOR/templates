# 1 ############################################################################
def example_quality_func():
	# QualityCheckTags:
	# [] CODE
	# [] INPUTCHECK
	# [] DOCS
	# [] TEST
	"""<DESC>
	
	Arguments:
	- <var_name> (<var_type>): <var_desc>
	
	Optional arguments:
	- <var_name> (<var_type>): <var_desc>
	
	Return:
	<return_desc>
	
	"""
	alternative_isinstance('<var_name>',(<var_type>,),<var_name>)
	alternative_type_checking('<var_name>',(<var_type>,),<var_name>)
	alternative_issubclass('<var_name>',(<class_type>,),<var_name>)
	if not is_iterable(bools): raise arg_value_error('<var_name>','be iterable')
	<code>

# 2 ############################################################################
class Vector():
	# QualityCheckTags:
	# [] CODE
	# [] INPUTCHECK
	# [] DOCS
	# [] TEST
	''' Vector implementation
	
	# Object Creation
	    Vector(*dimensions)
	  Optional Arguments:
	  - *dimensions (int,float): Value of each dimensions
	
	# Object Representation
	  >>> Vector(-1,0,1)
	  Vector((-1,0,1)
	  
	# Object Iteration
	  >>> list(Vector(-1,0,1)
	  [-1,0,1]
	
	# Negative Unary
	  >>> -Vector(-1,0,1)
	  Vector(1,0,-1)
	
	# Adding/Subtracting
	  ## With same type
	    >>> Vector(-1,0,1)+Vector(-1,0,1)
	    Vector(-2,0,2)
	    >>> Vector(-1,0,1)-Vector(-1,0,1)
	    Vector(0,0,0)
	  ## With int-alike/float-alike
	    >>> Vector(-1,0,1)+1
	    Vector(0,1,2)
	    >>> Vector(-1,0,1)-1
	    Vector(-2,-1,0)
	
	# Multiplying
	  ## With int-alike/float-alike
	    >>> Vector(-1,0,1)*10
	    Vector(-10,0,10)
	
	# Methods
	  - magnitude()
	    Returns: Magnitude of vector
	
	# Variables
	  - dimensions (list) : consists of dimensions' values
	'''
	dimensions=[]
	def __init__(self,*dimensions):
		# Type Checking
		for dimension in dimensions: npc_m.alternative_isinstance('*dimensions',(int,float),dimension)
		self.dimensions=list(dimensions)
	def __repr__(self):
		return 'Vector('+repr(self.dimensions)[1:-1]+')'
	def __iter__(self):
		return (dimension for dimension in self.dimensions)
	def __neg__(self):
		new_dimensions=[]
		for i in range(len(self.dimensions)):
			new_dimensions+=[-self.dimensions[i]]
		return type(self)(*new_dimensions)
	def __add__(self,another):
		if type(self)==type(another):
			if len(self.dimensions)==len(another.dimensions):
				new_dimensions=[]
				for i in range(len(self.dimensions)):
					new_dimensions+=[self.dimensions[i]+another.dimensions[i]]
				return type(self)(*new_dimensions)
			else:
				raise ValueError('Adding vectors with different dimensions.')
		else:
			# Type Checking (Adding type(self) for exception displaying
			npc_m.alternative_isinstance('adding value',(int,float,type(self)),another)
			new_dimensions=[]
			for i in range(len(self.dimensions)):
				new_dimensions+=[self.dimensions[i]+another]
			return type(self)(*new_dimensions)
	def __sub__(self,another):
		if type(self)==type(another):
			if len(self.dimensions)==len(another.dimensions):
				new_dimensions=[]
				for i in range(len(self.dimensions)):
					new_dimensions+=[self.dimensions[i]-another.dimensions[i]]
				return type(self)(*new_dimensions)
			else:
				raise ValueError('Subtracting vectors with different dimensions.')
		else:
			# Type Checking (Adding type(self) for exception displaying
			npc_m.alternative_isinstance('adding value',(int,float,type(self)),another)
			new_dimensions=[]
			for i in range(len(self.dimensions)):
				new_dimensions+=[self.dimensions[i]-another]
			return type(self)(*new_dimensions)
	def __mul__(self,another):
		if type(self)==type(another):
			raise ValueError('Muliplying vectors is not implemented yet.')
		else:
			# Type Checking
			npc_m.alternative_isinstance('adding value',(int,float),another)
			new_dimensions=[]
			for i in range(len(self.dimensions)):
				new_dimensions+=[self.dimensions[i]*another]
			return type(self)(*new_dimensions)
	def magnitude(self):
		return (sum(tuple(map(lambda x: x**2,self.dimensions))))**0.5
